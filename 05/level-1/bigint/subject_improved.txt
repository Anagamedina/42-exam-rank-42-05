[EN]
Assignment name: bigint
Expected files: bigint.hpp, bigint.cpp
--------------------------------------------------------------------------------

## 游늶 Description
In computer science, a bignum is an object representing an arbitrary precision
number. This is useful when you want to store a number bigger than SIZE_MAX
without any loss of precision. This is often achieved by storing an array or a
string containing the different "parts" of the number.

## 游꿢 Objective
Create a class called `bigint` that will store an arbitrary precision unsigned
integer.

## 游댢 Requirements
Your class must support:
- **Addition**: `+` and `+=` operators
- **Comparison**: `==`, `!=`, `<`, `>`, `<=`, `>=` operators
- **Digit shift**: `<<` and `>>` operators (like bitshift but for base 10)
  - Example: `(42 << 3 == 42000)` and `(1337 >> 2 == 13)`
- **Increment**: `++` (both prefix and postfix)
- **Output**: Printable with the `<<` operator (in base 10)
  - Output should not contain any leading zeros

## 游닇 Example Usage
```cpp
const bigint a(42);
bigint b(21), c, d(1337), e(d);

std::cout << "a = " << a << std::endl;        // 42
std::cout << "a + b = " << a + b << std::endl; // 63
std::cout << "(c += a) = " << (c += a) << std::endl; // 42
std::cout << "++b = " << ++b << std::endl;    // 22
std::cout << "b++ = " << b++ << std::endl;    // 22
std::cout << "(b << 10) + 42 = " << ((b << 10) + 42) << std::endl; // 23000000042
std::cout << "(d <<= 4) = " << (d <<= 4) << std::endl; // 13370000
std::cout << "(d >>= 2) = " << (d >>= (const bigint)2) << std::endl; // 133700
```

## 丘멆잺 Important Notes
- You will find a main in this directory that must work with your class
- All classes should be under orthodox canonical form
- Don't forget the `const` keywords where appropriate
- Handle edge cases (empty strings, leading zeros, etc.)

---

[ES]
Nombre de la asignaci칩n: bigint
Archivos esperados: bigint.hpp, bigint.cpp
--------------------------------------------------------------------------------

## 游늶 Descripci칩n
En ciencias de la computaci칩n, un bignum es un objeto que representa un n칰mero
de precisi칩n arbitraria. Esto es 칰til cuando quieres almacenar un n칰mero m치s
grande que SIZE_MAX sin p칠rdida de precisi칩n. Esto se logra frecuentemente
almacenando un array o string que contiene las diferentes "partes" del n칰mero.

## 游꿢 Objetivo
Crear una clase llamada `bigint` que almacene un entero sin signo de precisi칩n
arbitraria.

## 游댢 Requisitos
Tu clase debe soportar:
- **Suma**: operadores `+` y `+=`
- **Comparaci칩n**: operadores `==`, `!=`, `<`, `>`, `<=`, `>=`
- **Desplazamiento de d칤gitos**: operadores `<<` y `>>` (como bitshift pero para base 10)
  - Ejemplo: `(42 << 3 == 42000)` y `(1337 >> 2 == 13)`
- **Incremento**: `++` (tanto prefijo como postfijo)
- **Salida**: Imprimible con el operador `<<` (en base 10)
  - La salida no debe contener ceros a la izquierda

## 游닇 Ejemplo de Uso
```cpp
const bigint a(42);
bigint b(21), c, d(1337), e(d);

std::cout << "a = " << a << std::endl;        // 42
std::cout << "a + b = " << a + b << std::endl; // 63
std::cout << "(c += a) = " << (c += a) << std::endl; // 42
std::cout << "++b = " << ++b << std::endl;    // 22
std::cout << "b++ = " << b++ << std::endl;    // 22
std::cout << "(b << 10) + 42 = " << ((b << 10) + 42) << std::endl; // 23000000042
std::cout << "(d <<= 4) = " << (d <<= 4) << std::endl; // 13370000
std::cout << "(d >>= 2) = " << (d >>= (const bigint)2) << std::endl; // 133700
```

## 丘멆잺 Notas Importantes
- Encontrar치s un main en este directorio que debe funcionar con tu clase
- Todas las clases deben estar bajo la forma can칩nica ortodoxa
- No olvides las palabras clave `const` donde sea apropiado
- Maneja casos edge (strings vac칤os, ceros a la izquierda, etc.)
