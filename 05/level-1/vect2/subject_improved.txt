[EN]
Assignment name: vect2
Expected files: vect2.cpp, vect2.hpp
--------------------------------------------------------------------------------

## 📋 Description
Create a class `vect2` representing a mathematical vector of dimension 2 containing integers.

## 🎯 Objective
Implement a 2D vector class with complete operator overloading for mathematical operations.

## 🔧 Requirements

### Core Operations
- **Addition**: `+` and `+=` operators
- **Subtraction**: `-` and `-=` operators  
- **Scalar multiplication**: `*` and `*=` operators
- **Element-wise multiplication**: `*` operator between vectors
- **Unary minus**: `-` operator (negation)

### Access Operations
- **Array access**: `[]` operator (with indices 0 and 1)
  - No bound checking required
  - Must support both const and non-const access

### Increment/Decrement
- **Increment**: `++` (both prefix and postfix)
- **Decrement**: `--` (both prefix and postfix)

### Comparison
- **Equality**: `==` and `!=` operators

### Output
- **Stream output**: `<<` operator
  - Must produce the same output as: `std::cout << "{" << v[0] << ", " << v[1] << "}"`

### Commutativity
- **Scalar multiplication**: Support `int * vect2` (friend function)

## 📝 Example Usage
```cpp
vect2 v1; // (0, 0)
vect2 v2(1, 2); // (1, 2)
const vect2 v3(v2); // (1, 2)
vect2 v4 = v2; // (1, 2)

// Basic operations
v2 += v3; // (2, 4)
v1 -= v2; // (-2, -4)
v2 = v3 + v3 * 2; // (3, 6)
v2 = 3 * v2; // (9, 18) - Commutative

// Increment/Decrement
std::cout << v4++ << std::endl; // (1, 2)
std::cout << ++v4 << std::endl; // (3, 4)
std::cout << v4-- << std::endl; // (3, 4)
std::cout << --v4 << std::endl; // (1, 2)

// Access
v1[1] = 12;
std::cout << "v1[1]: " << v1[1] << std::endl;

// Comparison
std::cout << "v1 == v3: " << (v1 == v3) << std::endl;
```

## ⚠️ Important Notes
- You will find a main in this directory that must work with your class
- All classes should be under orthodox canonical form
- Don't forget the `const` keywords where appropriate
- The expression `(vect2(2,2) * 2 == vect2(4,4))` must be true
- Implement proper copy constructor and assignment operator

---

[ES]
Nombre de la asignación: vect2
Archivos esperados: vect2.cpp, vect2.hpp
--------------------------------------------------------------------------------

## 📋 Descripción
Crear una clase `vect2` que represente un vector matemático de dimensión 2 que contenga enteros.

## 🎯 Objetivo
Implementar una clase de vector 2D con sobrecarga completa de operadores para operaciones matemáticas.

## 🔧 Requisitos

### Operaciones Principales
- **Suma**: operadores `+` y `+=`
- **Resta**: operadores `-` y `-=`
- **Multiplicación por escalar**: operadores `*` y `*=`
- **Multiplicación elemento a elemento**: operador `*` entre vectores
- **Menos unario**: operador `-` (negación)

### Operaciones de Acceso
- **Acceso por array**: operador `[]` (con índices 0 y 1)
  - No se requiere verificación de límites
  - Debe soportar tanto acceso const como no-const

### Incremento/Decremento
- **Incremento**: `++` (tanto prefijo como postfijo)
- **Decremento**: `--` (tanto prefijo como postfijo)

### Comparación
- **Igualdad**: operadores `==` y `!=`

### Salida
- **Salida por stream**: operador `<<`
  - Debe producir la misma salida que: `std::cout << "{" << v[0] << ", " << v[1] << "}"`

### Conmutatividad
- **Multiplicación por escalar**: Soportar `int * vect2` (función friend)

## 📝 Ejemplo de Uso
```cpp
vect2 v1; // (0, 0)
vect2 v2(1, 2); // (1, 2)
const vect2 v3(v2); // (1, 2)
vect2 v4 = v2; // (1, 2)

// Operaciones básicas
v2 += v3; // (2, 4)
v1 -= v2; // (-2, -4)
v2 = v3 + v3 * 2; // (3, 6)
v2 = 3 * v2; // (9, 18) - Conmutativo

// Incremento/Decremento
std::cout << v4++ << std::endl; // (1, 2)
std::cout << ++v4 << std::endl; // (3, 4)
std::cout << v4-- << std::endl; // (3, 4)
std::cout << --v4 << std::endl; // (1, 2)

// Acceso
v1[1] = 12;
std::cout << "v1[1]: " << v1[1] << std::endl;

// Comparación
std::cout << "v1 == v3: " << (v1 == v3) << std::endl;
```

## ⚠️ Notas Importantes
- Encontrarás un main en este directorio que debe funcionar con tu clase
- Todas las clases deben estar bajo la forma canónica ortodoxa
- No olvides las palabras clave `const` donde sea apropiado
- La expresión `(vect2(2,2) * 2 == vect2(4,4))` debe ser verdadera
- Implementa constructor de copia y operador de asignación apropiados
